name: Deploy Terraform to Azure

on:
  push:
    branches:
      - gh-actions-deploy
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, staging, prod)'
        required: true
        default: 'dev'
      stacks_name:
        description: Name of the application stack to be deployed
        required: true
        default: policy_test

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./stacks/${{ github.event.inputs.stack_name }}/examples/
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6  # Use the latest stable version
#
#      - name: Azure Login
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Determine Present Working Directory
        run: pwd

      - name: Determine Backend Config
        id: backend-config
        run: |
          if [ "${{ github.event.inputs.environment }}" != "prod" ]; then
            echo "::set-output name=config_file::app.nonprod.config"
          else
            echo "::set-output name=config_file::prod.config"
          fi

      - name: Initialize Terraform
        run: terraform init
#        run: terraform init -reconfigure -backend-config="./config/${{ github.event.inputs.environment }}.config" -backend-config="./config/${{ github.event.inputs.environment }}.config"

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -var-file="environment=${{ github.event.inputs.environment }}.tfvars"
#
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve tfplan
